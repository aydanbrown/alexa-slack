var utilities = require('utilities');
var slack = require('slack');
var similar = require('string-similarity');
var speech = require('speech');

var defaultReprompt = 'Would you like anything else?';

// Called when a session is started
exports.StartSession = function(next) {
  // Get the teams channels
  slack('channels.list').on('success', function(res) {
    var channels = [];
    // Get the channel info we need
    res.channels.forEach(function(channel) {
      channels.push({
        id: channel.id,
        name: channel.name,
        topic: channel.topic.value,
        purpose: channel.purpose.value
      });
    });
    // Get the teams members
    slack('users.list').on('success', function(res) {
      var members = [];
      // Get the member info we need
      res.members.forEach(function(member) {
        members.push({
          id: member.id,
          teamID: member.team_id,
          name: member.name,
          status: member.status,
          firstName: member.profile.first_name,
          lastName: member.profile.last_name
        });
      });
      // Pass back attributes
      next(null, { name: 'Alexa', channels: channels, members: members });
    }).on('error', next);
  }).on('error', next);
}

// Called when the user launches the skill without specifying an intent
exports.Launch = function(request, session, next) {
  var sessionAttributes = { name: 'Alexa' };
  var cardTitle = "Welcome";
  var speechOutput = "Welcome to Slack";
  var repromptOutput = "If you are unsure, you can ask for help";

  next(sessionAttributes, utilities.buildSpeechlet('cardTitle', speechOutput, repromptOutput, false));
}

// Called when a user invokes the default help intent
exports.Help = function(intent, session, next) {
  var cardTitle = 'Slack Help';
  var speechOutput = 'You can join a channel by saying join, then the channel name. ' +
  'You can send a message with say, followed by the message you want to send. ' +
  'Have fun slacking!';

  next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
}

// Called when the session is ended
exports.End = function(intent, session, next) {
  var cardTitle = 'Session Ended';
  var speechOutput = 'Have a nice day';

  next({}, utilities.buildSpeechlet(cardTitle, speechOutput, '', true));
}

/*
Join Slack channel
  Channel: AMAZON.LITERAL
*/
exports.JoinChannel = function(intent, session, next) {
  var cardTitle = 'Join Channel';
  var channelSlot = intent.slots.Channel.value;

  var speechOutput = '';

  slack('channels.list').on('success', function(res) {
    var channels = [];
    var channelMap = {};
    res.channels.forEach(function(channel) {
      channels.push(channel.name);
      channelMap[channel.name] = channel.id;
    });
    console.log(channelMap);
    // Return if there were no channels
    if(channels.length == 0) {
      speechOutput = 'Sorry I couldn\'t find any channels';
      return next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
    }

    var matches = similar.findBestMatch(channelSlot, channels);

    if(matches.bestMatch.rating > 0.5) {
      var channel = channelMap[matches.bestMatch.target];

      session.attributes.targetType = 'channel';
      session.attributes.targetName = matches.bestMatch.target;
      session.attributes.targetID = channel;

      speechOutput = 'You have joined the channel ' + matches.bestMatch.target;
    } else {
      speechOutput = 'Sorry, I couldn\'t find what you were looking for, the best match was ' + matches.bestMatch.target;
    }

    next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
  });
}

/*
Post Message
  Message: AMAZON.LITERAL
  Target: AMAZON.LITERAL
*/

exports.PostMessage = function(intent, session, next) {
  var cardTitle = 'Post Message';
  var messageSlot = intent.slots.Message ? intent.slots.Message.value : null;
  var targetSlot = intent.slots.Target ? intent.slots.Target.value : null;
  var speechOutput = '';

  console.log(`Post Message - Target: ${targetSlot}, Message: ${messageSlot}`);

  // if(!targetSlot) {
  //   console.log('Not target');
  //   if(!session.attributes.targetType) {
  //     console.log('No session target, rejecting request');
  //     speechOutput = 'Sorry, you haven\'t specified a channel, say join then the channel\'s name';
  //     return next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
  //   }
  //   var map = new utilities.SessionMap(session);
  //   var match = map.matchChannel(targetSlot);
  //   session.attributes.target = match;
  // }

  if(!messageSlot) {
    speechOutput = 'Sorry I didn\'nt hear the message, please try again';
    return next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
  }

  var options = {
    username: session.attributes.name || 'Alexa',
    channel: session.attributes.targetID,
    text: messageSlot
  }

  slack('chat.postMessage', options).on('success', function(res) {
    speechOutput = 'Your message has been posted in ' + session.attributes.targetName;
    next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
  }).on('error', function(err) {
    speechOutput = 'Sorry I couldn\'t send your message, please try again';
    next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
  });
}

exports.ReadLastMessage = function(intent, session, next) {
  var cardTitle = 'Read Messages';
  var Count = intent.slots.Count ? intent.slots.Count.value || 1 : 1;
  var speechOutput = '';

  if(session.attributes.targetType) {
    slack('channels.history', { channel: session.attributes.targetID, count: Count }).on('success', function(res) {
      var messages = [];
      res.messages.forEach(function(message) {
        var date = new Date(parseFloat(message.ts) * 1000);
        console.log(date);
        messages.push(`${speech.formatSSMLDate(date)} <break strength="strong"/> ${message.text}`);
      });
      speechOutput = `<speak>${messages.join('<break strength="strong"/>')}</speak>`;

      next(session.attributes, utilities.buildSSML(cardTitle, speechOutput, defaultReprompt, false));
    });
  // Handle no set channel
  } else {
    speechOutput = 'Please join a channel first';
    next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
  }
}

exports.ReadTopic = function(intent, session, next) {
  var cardTitle = 'Read topic';
  var speechOutput = '';

  var topic = null;

  if(session.attributes.targetID && session.attributes.channels) {
    session.attributes.channels.forEach(function(channel) {
      if(channel.id == session.attributes.targetID) {
        if(channel.topic == '') {
          topic = 'Sorry, there is no topic for this channel';
        } else {
          topic = channel.topic;
        }
      }
    });
  }

  if(topic) {
    speechOutput = topic;
  } else {
    speechOutput = 'Sorry, I couldn\'t find the topic';
  }

  next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
}

exports.ReadPurpose = function(intent, session, next) {
  var cardTitle = 'Read purpose';
  var speechOutput = '';

  var purpose = null;

  if(session.attributes.targetID && session.attributes.channels) {
    session.attributes.channels.forEach(function(channel) {
      if(channel.id == session.attributes.targetID) {
        if(channel.purpose == '') {
          purpose = 'Sorry, there is no purpose for this channel';
        } else {
          purpose = channel.purpose;
        }
      }
    });
  }

  if(purpose) {
    speechOutput = purpose;
  } else {
    speechOutput = 'Sorry, I couldn\'t find the purpose';
  }

  next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
}

exports.ListChannels = function(intent, session, next) {
  var cardTitle = 'List channels';
  var speechOutput = '';

  var purpose = null;

  if(session.attributes.channels) {
    var channels = [];
    session.attributes.channels.forEach(function(channel) {
      
    });
  }

  if(purpose) {
    speechOutput = purpose;
  } else {
    speechOutput = 'Sorry, I couldn\'t find the purpose';
  }

  next(session.attributes, utilities.buildSpeechlet(cardTitle, speechOutput, defaultReprompt, false));
}
