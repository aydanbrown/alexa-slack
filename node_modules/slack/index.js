var request = require('request');

module.exports = function slackRequest(method, options, callback) {
  return (function RequestHandler(method, options, callback) {
    console.log(`Slack Request: ${method} - ${JSON.stringify(options, true, 3)}`);
    // Set the authentication token from ./config.js
    var query = [ 'token=' + require('./config').token ];
    // Build the query string from options
    if(options) {
      for(o in options) {
        query.push(`${o}=${options[o]}`);
      }
    }
    // Set callback
    if(callback) {
      this.events = { callback: callback };
    }
    var thisRequest = this;
    // Response object
    function response(err, res, body) {
      if(err) {
        console.log('Error with Slack request');
        console.error(err);
        if(thisRequest.events) {
          // Error callback
          if(thisRequest.events.error) {
            thisRequest.events.error(err);
          // Default callback
          } else if(thisRequest.events.callback) {
            thisRequest.events.callback(err);
          }
        }
      } else {
        var result = JSON.parse(body);
        if(!result.ok) {
          console.log('Error with Slack response');
          console.error(body);
          if(thisRequest.events) {
            // Slack fail callback
            if(thisRequest.events.fail) {
              thisRequest.events.fail(result);
            // Error callback
            } else if(thisRequest.events.error) {
              thisRequest.events.error(result.error);
            // Default callback
            } else if(thisRequest.events.callback) {
              thisRequest.events.callback(result.error, result);
            }
          }
        } else {
          if(thisRequest.events) {
            // Success callback
            if(thisRequest.events.success) {
              thisRequest.events.success(result);
            // Default callback
            } else if(thisRequest.events.callback) {
              thisRequest.events.callback(null, result);
            }
          }
        }
      }
    }
    // Set an event (success, error)
    this.on = function(event, callback) {
      // Create events callback object
      if(!this.events) {
        this.events = {};
      }
      // Map the callback
      this.events[event] = callback;
      return this;
    }
    // Send HTTPS request to slack
    request(`https://slack.com/api/${method}?${query.join('&')}`, response);
    // Return the request object
    return this;
  })(method, options, callback);
}
